# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'jasonPersonal'
  #azureLocation: 'eastus'
  # Terraform settings
  #terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/samples/integration-testing/src'

- task: TerraformInstaller@0
  displayName: 'Install Terraform'

- task: TerraformCLI@0
  displayName: 'terraform init'
  inputs:
    command: 'init'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform validate'
  inputs:
    command: 'validate'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform plan'
  inputs:
    command: 'plan'
    environmentServiceName: $(serviceConnection)
#commandOptions: -var location=$(azureLocation)
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform apply'
  inputs:
    command: 'apply'
#environmentServiceName: $(serviceConnection)
#commandOptions: -var location=$(azureLocation)
    allowTelemetryCollection: true
