# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: TerraformInstaller@0
  displayName: 'Install Terraform'

- task: TerraformCLI@0
  displayName: 'terraform init'
  inputs:
    command: init
    backendType: azurerm
    backendServiceArm: 'JasonPersonal'
    backendAzureRmResourceGroupName: 'tfstate'
    backendAzureRmStorageAccountName: 'tfstate7000'
    backendAccessKey: 'Dz+qiBLaFSUiYUM87kQ1sFKCaF0O8AbPkYODlVIlxRI7xcSoEVIYJ4j61ifLdgbn6TozLKlmcgVG/uimXnndxQ=='
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'dev.terraform.tfstate'
    #commandOptions: -backend-config="storage_account_name=tfstate7000" -backend-config="container_name=tfstate" -backend-config="access_key=kz46Dxf5QrTfF/7kR2EDHD5jl4XiW1mWeit0KYXgN1pw8A4v8ox0mE1LFPcuMuUzGBCthwDI65VsNZdtoYlLPA==" -backend-config="key=codelab.microsoft.tfstate"
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform validate'
  inputs:
    command: 'validate'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform plan'
  inputs:
    command: 'plan'
    environmentServiceName: 'JasonPersonal'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: 'terraform apply'
  inputs:
    command: 'apply'
    environmentServiceName: 'JasonPersonal'
    allowTelemetryCollection: true
